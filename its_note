gic its note
============

-v0.1 2015.9.5 Sherlock init
-v0.2 2015.9.8 Sherlock add v4.2 ITS analysis

struct its_device *its_create_device(struct its_node *its, u32 dev_id, int nvecs)

/* this is the arch of interrupt sub-system */
struct irq_desc
    --> struct irq_data
        --> struct irq_chip
        --> struct irq_domain
            --> struct irq_domain_ops

/* this is the arch of ITS sub-system, for v4.1, for v4.2, kernel changed a lot */
struct its_node
    --> struct irq_domain
        --> struct irq_domain_ops (its_domain_ops)
	        /* alloc put struct irq_chip (its_irq_chip) to related
		 * struct irq_data
		 *
		 * Fix me for other work alloc does
		 */
	    --> .alloc (its_irq_domain_alloc)
	    --> .activate (its_irq_domain_activate)
	    --> ...
    --> struct msi_controller
            /* father irq_domain is irq_domain above */
        --> struct irq_domain
	        /* msi_domain_ops defined in kernel/irq/msi.c */
	    --> struct irq_domain_ops (struct irq_domain_ops msi_domain_ops)
	    --> void *host_data (struct msi_domain_info its_pci_msi_domain_info)
                --> struct msi_domain_ops (its_pci_msi_ops)
                    --> .msi_prepare (its_msi_prepare)
                    --> ...
                --> struct irq_chip (its_msi_irq_chip)

/* this is the arch of ITS sub-system for v4.2, ITS driver changed a lot in v4.2 */
there is no irq_domain in struct its_node. In drivers/irqchip/irq-gic-v3-its.c,
just build up below irq_domain.

		gic irq_domain --> irq_domain_ops(gic_irq_domain_ops)
		      ^                --> .alloc(gic_irq_domain_alloc)
		      |
		its irq_domain --> irq_domain_ops(its_domain_ops)
		      ^                --> .alloc(its_irq_domain_alloc)
		      |                --> ...
		      |        --> host_data(struct msi_domain_info)
		      |            --> msi_domain_ops(its_msi_domain_ops)
		      |                --> .msi_prepare(its_msi_prepare)
		      |            --> irq_chip, chip_data, handler...
		      |            --> void *data(struct its_node)

In drvers/irqchip/irq-gic-v3-its-pci-msi.c,
   drvers/irqchip/irq-gic-v3-its-platform-msi.c, it seems that we create two
other irq_domain:

pci_its irq_domain                      platform_its irq_domain
        /* kernel/irq/msi.c */                  /* kernel/irq/msi.c */
    --> irq_domain_ops(msi_domain_ops)      --> irq_domain_ops(msi_domain_op)
        /* irq-gic-v3-its-pci-msi.c             /* irq-gic-v3-its-platform-msi.c
	 * (its_pci_msi_domain_info)             * (its_pmsi_domain_info)
	 */                                      */
    --> void *host_data                     --> void *host_data
        --> .ops(its_pci_msi_ops)               --> .ops(its_pmsi_ops)
	        /* its_pci_msi_prepare */   	    /* its_pmsi_prepare */
	    --> .msi_prepare                    --> .msi_prepare
	--> .chip(its_msi_irq_chip)             --> .chip(its_pmsi_irq_chip)

/* this is the work flow of PCI MSI */
/* kernel/drivers/pci/msi.c */
pci_msi_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
        /* so this irq_domain is pci_its irq_domain ? */
    --> pci_msi_domain_alloc_irqs(domain, dev, nvec, type);
        --> msi_domain_alloc_irqs(domain, &dev->dev, nvec);
	        /* should be its_pci_msi_prepare ? */
	    --> ps->msi_prepare(domain, dev, nvec, &arg);
	       /* domain, virq, desc->nvec_used, dev_to_node(dev), &arg, false */
	    --> __irq_domain_alloc_irqs()

/* details of how ITS work */
/* in pci_msi irq_domain */
its_pci_msi_prepare
    --> ... (get dev_ip)
        /* in its irq_domain */
    --> its_msi_prepare
        --> its_create_device(its, dev_id, nvec);




some hardware table:
--------------------
its device table
its collection table
lpi pending table
lpi configure table
